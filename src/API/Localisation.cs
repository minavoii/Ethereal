using System;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using Ethereal.Utils;
using HarmonyLib;
using Newtonsoft.Json;
using UnityEngine;

namespace Ethereal.API;

public static class Localisation
{
    [Serializable]
    private class Language()
    {
        public string name = "Custom Language";

        /// <summary>
        /// The language code used for formatting numbers and such.
        /// </summary>
        public string code = "en-US";

        public string game_version = "0.0.0.0";

        /// <summary>
        /// Addons are loaded after other localisations files.<para/>
        /// They can be used to add localisations to another language (custom or native).
        /// </summary>
        public bool addon = false;

        public Dictionary<int, string> localisations = [];
    }

    internal class CustomLocaleData(int id, Dictionary<ELanguage, string> data)
    {
        public readonly int id = id;

        public Dictionary<ELanguage, string> data = data;
    }

    /// <summary>
    /// Contains the name of all native and custom languages.
    /// </summary>
    private static readonly List<string> AllLanguageNames =
    [
        .. Enum.GetValues(typeof(ELanguage)).Cast<ELanguage>().Select(Loca.GetLanguageString),
    ];

    private static readonly ConcurrentQueue<
        Tuple<LocalisationData.LocalisationDataEntry, Dictionary<string, string>>
    > Queue = new();

    internal static readonly Dictionary<ELanguage, string> CustomLanguages = [];

    internal static readonly Dictionary<string, CustomLocaleData> CustomLocalisations = [];

    internal static bool IsReady = false;

    private static readonly string LOCALISATIONS_PATH = Path.Join(
        Plugin.ETHEREAL_PATH,
        "localisations"
    );

    private const string TEMPLATE_NAME = "template.json";

    private const string TEMPLATE_WARNING =
        "Do NOT edit this file directly!!! Make a copy first!!! It will get replaced every game update.";

    public static void AddLocalisedText(LocalisationData.LocalisationDataEntry entry)
    {
        // Defer loading until ready
        if (GameController.Instance?.LocalisationData == null || !IsReady)
        {
            Queue.Enqueue(new(entry, null));
            return;
        }

        var pair = LocalisationData.Instance.LocaEntries.FirstOrDefault(x =>
            x.Value.ID == entry.ID
        );

        // Update text
        if (pair.Value != null)
        {
            if (!string.IsNullOrEmpty(entry.StringContentEnglish))
                pair.Value.StringContentEnglish = entry.StringContentEnglish;

            if (!string.IsNullOrEmpty(entry.StringContentGerman))
                pair.Value.StringContentGerman = entry.StringContentGerman;

            if (!string.IsNullOrEmpty(entry.StringContentSpanish))
                pair.Value.StringContentSpanish = entry.StringContentSpanish;

            if (!string.IsNullOrEmpty(entry.StringContentPortuguese))
                pair.Value.StringContentPortuguese = entry.StringContentPortuguese;

            if (!string.IsNullOrEmpty(entry.StringContentFrench))
                pair.Value.StringContentFrench = entry.StringContentFrench;

            if (!string.IsNullOrEmpty(entry.StringContentItalian))
                pair.Value.StringContentItalian = entry.StringContentItalian;

            if (!string.IsNullOrEmpty(entry.StringContentRussian))
                pair.Value.StringContentRussian = entry.StringContentRussian;

            if (!string.IsNullOrEmpty(entry.StringContentJapanese))
                pair.Value.StringContentJapanese = entry.StringContentJapanese;

            if (!string.IsNullOrEmpty(entry.StringContentSimplifiedChinese))
                pair.Value.StringContentSimplifiedChinese = entry.StringContentSimplifiedChinese;

            // Update the dictionary
            if (pair.Key != entry.StringContent)
            {
                pair.Value.StringContent = entry.StringContent;
                LocalisationData.Instance.LocaEntries.Remove(pair.Key);
                LocalisationData.Instance.LocaEntries.Add(entry.StringContent, pair.Value);

                // Update custom languages translation keys
                if (CustomLocalisations.ContainsKey(pair.Key))
                {
                    CustomLocalisations.Add(entry.StringContent, new(entry.ID, []));

                    foreach (var (langId, original) in CustomLocalisations[pair.Key].data)
                    {
                        CustomLocalisations[entry.StringContent].data.Add(langId, original);
                    }

                    CustomLocalisations.Remove(pair.Key);
                }
            }
        }
        // Add text
        else
            LocalisationData.Instance.LocaEntries.Add(entry.StringContent, entry);
    }

    public static void AddLocalisedText(
        LocalisationData.LocalisationDataEntry entry,
        Dictionary<string, string> customLanguageEntries
    )
    {
        // Defer loading until ready
        if (GameController.Instance?.LocalisationData == null || !IsReady)
        {
            Queue.Enqueue(new(entry, customLanguageEntries));
            return;
        }

        AddLocalisedText(entry);

        foreach (var (langName, text) in customLanguageEntries)
        {
            var lang = CustomLanguages.FirstOrDefault(x => x.Value == langName);

            // Language not found found
            if (lang.Value == null)
                continue;

            // Update text
            if (CustomLocalisations.TryGetValue(entry.StringContent, out var localisation))
                localisation.data[lang.Key] = text;
            // Add text
            else
                CustomLocalisations.Add(
                    entry.StringContent,
                    new((int)lang.Key, new() { { lang.Key, text } })
                );
        }
    }

    internal static void ReadQueue()
    {
        while (Queue.TryDequeue(out var res))
        {
            if (res.Item2 == null)
                AddLocalisedText(res.Item1);
            else
                AddLocalisedText(res.Item1, res.Item2);
        }
    }

    internal static void LoadLanguages()
    {
        List<Language> languageList = [];

        foreach (FileInfo file in new DirectoryInfo(LOCALISATIONS_PATH).EnumerateFiles())
        {
            if (file.Name == TEMPLATE_NAME)
                continue;

            string json = file.OpenText().ReadToEnd();
            Language language = JsonConvert.DeserializeObject<Language>(json);

            // Remove the "don't edit this file" warning from the template
            //   in case a modder forgot to remove it
            language.localisations.Remove(-1);
            languageList.Add(language);
        }

        foreach (Language language in languageList.OrderBy(x => x.addon))
        {
            Log.API.LogInfo($"Loaded locale: {language.name}{(language.addon ? " (Addon)" : "")}");

            if (AllLanguageNames.Contains(language.name))
                UpdateLanguage(language);
            else
                CreateLanguage(language);
        }
    }

    private static void CreateLanguage(Language language)
    {
        var availableLanguages =
            (List<ELanguage>)
                AccessTools
                    .Field(typeof(LocalisationData), "availableLanguages")
                    .GetValue(LocalisationData.Instance);

        ELanguage langId =
            Enum.GetValues(typeof(ELanguage)).Cast<ELanguage>().Max() + 1 + CustomLanguages.Count;

        availableLanguages.Add(langId);
        CustomLanguages.Add(langId, language.name);
        AllLanguageNames.Add(language.name);

        foreach (var (locaId, text) in language.localisations)
        {
            // Create native localisation if it doesn't exist
            if (!LocalisationData.Instance.LocaEntries.Any(x => x.Value.ID == locaId))
            {
                LocalisationData.Instance.LocaEntries.Add(
                    text,
                    new()
                    {
                        ID = locaId,
                        StringContent = text,
                        StringContentEnglish = text,
                    }
                );
            }

            // Create custom localisation if it doesn't exist
            var pair = CustomLocalisations.FirstOrDefault(x => x.Value.id == locaId);

            // Already localised in another custom language
            if (pair.Value != null)
                pair.Value.data.Add(langId, text);
            // Not localised in any custom language yet
            // We need to add a localisation now so we can use it later
            //   (e.g. we add items later and want to remember their localisation in this language)
            else
            {
                if (CustomLocalisations.TryGetValue(text, out var localisation))
                    localisation.data[langId] = text;
                else
                    CustomLocalisations.Add(text, new(locaId, new() { { langId, text } }));
            }
        }

        // Add culture format
        var CultureInfos =
            (Dictionary<ELanguage, CultureInfo>)
                AccessTools.Field(typeof(global::Utils), "CultureInfos").GetValue(null);

        if (CultureInfos == null)
        {
            CultureInfos = new Dictionary<ELanguage, CultureInfo>
            {
                { ELanguage.English, CultureInfo.CreateSpecificCulture("en-US") },
                { ELanguage.Chinese, CultureInfo.CreateSpecificCulture("zh-CN") },
                { ELanguage.French, CultureInfo.CreateSpecificCulture("fr-FR") },
                { ELanguage.German, CultureInfo.CreateSpecificCulture("de-DE") },
                { ELanguage.Italian, CultureInfo.CreateSpecificCulture("it-IT") },
                { ELanguage.Russian, CultureInfo.CreateSpecificCulture("ru-RU") },
                { ELanguage.Spanish, CultureInfo.CreateSpecificCulture("es-ES") },
                { ELanguage.Japanese, CultureInfo.CreateSpecificCulture("ja-JP") },
            };

            AccessTools.Field(typeof(global::Utils), "CultureInfos").SetValue(null, CultureInfos);
        }

        try
        {
            CultureInfos.Add(langId, CultureInfo.CreateSpecificCulture(language.code));
        }
        catch (CultureNotFoundException)
        {
            CultureInfos.Add(langId, CultureInfo.CreateSpecificCulture("en-US"));
        }
    }

    private static void UpdateLanguage(Language language)
    {
        foreach (var (locaId, text) in language.localisations)
        {
            var (original, entry) = LocalisationData.Instance.LocaEntries.FirstOrDefault(x =>
                x.Value.ID == locaId
            );

            // Create native localisation if it doesn't exist
            if (entry == null)
            {
                original = text;
                entry = new()
                {
                    ID = locaId,
                    StringContent = text,
                    StringContentEnglish = text,
                };

                LocalisationData.Instance.LocaEntries.Add(text, entry);
            }

            // Native languages
            if (language.name == Loca.GetLanguageString(ELanguage.English))
                entry.StringContentEnglish = text;
            else if (language.name == Loca.GetLanguageString(ELanguage.German))
                entry.StringContentGerman = text;
            else if (language.name == Loca.GetLanguageString(ELanguage.Spanish))
                entry.StringContentSpanish = text;
            else if (language.name == Loca.GetLanguageString(ELanguage.Portuguese))
                entry.StringContentPortuguese = text;
            else if (language.name == Loca.GetLanguageString(ELanguage.French))
                entry.StringContentFrench = text;
            else if (language.name == Loca.GetLanguageString(ELanguage.Italian))
                entry.StringContentItalian = text;
            else if (language.name == Loca.GetLanguageString(ELanguage.Russian))
                entry.StringContentRussian = text;
            else if (language.name == Loca.GetLanguageString(ELanguage.Japanese))
                entry.StringContentJapanese = text;
            else if (language.name == Loca.GetLanguageString(ELanguage.Chinese))
                entry.StringContentSimplifiedChinese = text;
            // Custom languages
            else if (CustomLanguages.TryTakeKey(x => x.Value == language.name, out var langId))
            {
                // Update text
                if (CustomLocalisations.TryTakeKey(x => x.Value.id == locaId, out var key))
                    CustomLocalisations[key].data[langId] = text;
                // Add text
                else
                    CustomLocalisations.Add(original, new(locaId, new() { { langId, text } }));
            }
        }
    }

    internal static void GenerateTemplate()
    {
        // Only regenerate the template after updating to a new version
        //  or if it wasn't found
        if (GetTemplateVersion() == Application.version)
            return;

        Language lang = new() { name = "English", game_version = Application.version };
        lang.localisations.Add(-1, TEMPLATE_WARNING);

        foreach (var (text, loca) in LocalisationData.Instance.LocaEntries.OrderBy(x => x.Value.ID))
        {
            lang.localisations.Add(loca.ID, text);
        }

        string json = JsonConvert.SerializeObject(lang, Formatting.Indented);
        Directory.CreateDirectory(LOCALISATIONS_PATH);
        File.WriteAllText(Path.Join(LOCALISATIONS_PATH, TEMPLATE_NAME), json);
    }

    private static string GetTemplateVersion()
    {
        try
        {
            string template_json = File.ReadAllText(Path.Join(LOCALISATIONS_PATH, TEMPLATE_NAME));
            Language lang = JsonConvert.DeserializeObject<Language>(template_json);

            return lang.game_version ?? "0.0.0.0";
        }
        catch
        {
            return "0.0.0.0";
        }
    }
}
